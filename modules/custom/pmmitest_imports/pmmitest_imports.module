<?php
/**
 * @file
 * Main module file for PMMI Test Imports.
 */

/**
* Implements hook_drush_command().
*/
function pmmitest_imports_drush_command(){
  $items['distributors-import'] = array(
    'description' => "Imports distributors from CSV",
    'arguments' => array(
      'csv' => 'The path to the csv (relative to the Drupal root).',
    ),
    'aliases' => array('dist-im'),
    'examples' => array(
      'drush distributors-import sites/default/files/distributors.csv' => 'Imports distribotrs from the csv file at sites/default/files/distributors.csv.',
    ),
  );
  return $items;
}


function drush_pmmitest_imports_distributors_import($csv){
  // Define substring matches for Industries Served vocabulary.
  // The key will be used to create the term if it does not exist.
  $industries = array(
    'Beverages' => array(
      'Soft drink',
      'juice',
      'alcohol',
      'coffee',
      'tea',
      'wine',
      'beer',
      'brewer',
      'soda',
    ),
    'Breakfast foods' => array(
      'Cereal',
      'breakfast',
      'granola',
      'pancake',
      'waffle',
    ),
  );
  
  $industries_vocab = taxonomy_vocabulary_machine_name_load('industries_served');
  $industries_vid = $industries_vocab->vid;
  
  foreach ($industries as $key => $value) {
    $term_check = taxonomy_get_term_by_name($key, 'industries_served');
    dpm($term_check);
    if (!isset($term_check)) {
      $term = new stdClass();
      $term->name = $key;
      $term->vid = $industries_vid;
      taxonomy_term_save($term);
      $tids[$key] = $term->tid;
    }
    else {
      $tids[$key] = array_shift($term_check)->tid;
    }
  }
  dpm('tids');
  dpm($tids);
  
  watchdog('pmmitest_imports', 'get csv data', array(), WATCHDOG_NOTICE);
  $csv_data = csv_to_array($csv);
  if (empty($csv_data)) {
    watchdog('pmmitest_imports', 'Could not get CSV data for file @csv', array('@csv' => $csv), WATCHDOG_WARNING);
    return;
  }
  dpm($csv_data);
  
  foreach ($csv_data as $row) {
    // Get country ISO code if longer than two characters.
    $country = $row['Country'];
    if (strlen($country) > 2) {
      $country = _pmmitest_imports_fetch_country_iso($country);
    }
    //watchdog('pmmitest_imports', 'got a row', array(), WATCHDOG_NOTICE);
    //dpm($row);
    // Create an Entity.
    $node = entity_create('node', array('type' => 'distributor'));
    // Specify the author.
    $node->uid = 1;
    // Create a Entity Wrapper of that new Entity.
    $emw_node = entity_metadata_wrapper('node', $node);
    // Set the title and field values.
    //dpm($row['Distributor company']);
    $emw_node->title = $row['Distributor company'];

    // Only set country if the ISO code was found.
    if (isset($country)) {
      $emw_node->field_distributor_address->country = $country;
    }
    else {
      watchdog('pmmitest_imports', 'Could not fetch ISO for @country for distributor with legacy ID @id and nid @nid.', array('@country' => $country, '@id' => $row['ID'], '@nid' => $emw_node->getIdentifier()), WATCHDOG_WARNING);
    }

    $emw_node->field_distributor_address->thoroughfare = $row['Address 1'];
    $emw_node->field_distributor_address->premise = $row['Address 2'];
    $emw_node->field_distributor_address->locality = $row['City'];
    $emw_node->field_distributor_address->administrative_area = $row['State/Province'];
    //$emw_node->field_distributor_website->url = $row['Web'];

    // Add 'Beverages' term if substring matches exist.
    if (_pmmitest_imports_substring_match($industries['Beverages'], $row)) {
      $emw_node->field_distributor_industries[] = $tids['Beverages'];
    }
    // Add 'Breakfast foods' term if substring matches exist.
    if (_pmmitest_imports_substring_match($industries['Breakfast foods'], $row)) {
      $emw_node->field_distributor_industries[] = $tids['Breakfast foods'];
    }

    // Save the node.
    $emw_node->save();
}

/**
 * Helper function to determine if row data contains a substring match.
 *
 * @param array $substring_matches.
 *   The strings to look for each row.
 *
 * @param array $row.
 *   The row for the source being imported that includes the following headers:
 *     Industries served
 *     Industries served other
 *     Equipment types sold
 *
 * @return boolean
 *   Returns TRUE if a match was found and FALSE otherwise.
 */
function _pmmitest_imports_substring_match($substring_matches, $row) {
  $column_headers = array(
    'Industries served',
    'Industries served other',
    'Equipment types sold',
  );
  //dpm($column_header);
  foreach ($substring_matches as $substring_match) {
    dpm("substring_match: $substring_match");
    dpm("row for $column_header");
    dpm($row[$column_header]);
    if (strpos(strtolower($row['Industries served']), strtolower($substring_match)) !== FALSE || strpos(strtolower($row['Industries served other']), strtolower($substring_match)) !== FALSE || strpos(strtolower($row['Equipment types sold']), strtolower($substring_match)) !== FALSE ) {
      dpm('substream match true');
      dpm($substring_match);
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Convert a comma separated file into an associated array.
 * The first row should contain the array keys.
 *
 * Example:
 *
 * @param string $filename Path to the CSV file
 * @param string $delimiter The separator used in the file
 * @return array
 * @link http://gist.github.com/385876
 * @author Jay Williams <http://myd3.com/>
 * @copyright Copyright (c) 2010, Jay Williams
 * @license http://www.opensource.org/licenses/mit-license.php MIT License
 */
function csv_to_array($filename = '', $delimiter = ',') {
  watchdog('pmmitest_imports', 'converting csv to array', array(), WATCHDOG_NOTICE);
  if (!file_exists($filename) || !is_readable($filename)) {
    watchdog('pmmitest_imports', 'File @file does not exist or is not readable.', array('@file' => $filename), WATCHDOG_WARNING);
    return FALSE;
  }

  $header = NULL;
  $data = array();
  if (($handle = fopen($filename, 'r')) !== FALSE) {
    while (($row = fgetcsv($handle, 0, $delimiter)) !== FALSE) {
      if(!$header) {
        $header = $row;
      }
      else {
        $data[] = array_combine($header, $row);
      }
    }
    fclose($handle);
  }
  return $data;
}

/**
 * Helper function to fetch a country's ISO code.
 *
 * @param string $name
 *   The full name of the country.
 *
 * @return string $country_iso
 *   The two digit ISO country code.
 */
function _pmmitest_imports_fetch_country_iso($country){
  if(!$country){
    return FALSE;
  }
  require_once DRUPAL_ROOT . '/includes/locale.inc';
  $countries = country_get_list();
  $country_iso = array_search(strtolower($country), array_map('strtolower', $countries)); 
  if (!$country_iso) {
    return FALSE;
  }
  else {
    return $country_iso;
  }
}
